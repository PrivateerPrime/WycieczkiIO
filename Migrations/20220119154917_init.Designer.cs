// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WycieczkiIO.Data;

namespace WycieczkiIO.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220119154917_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WycieczkiIO.Models.Adres", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("KrajId")
                        .HasColumnType("int");

                    b.Property<int>("MiastoId")
                        .HasColumnType("int");

                    b.Property<int>("Numer")
                        .HasColumnType("int");

                    b.Property<string>("Ulica")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("AdresId");

                    b.HasIndex("KrajId");

                    b.HasIndex("MiastoId");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Atrakcja", b =>
                {
                    b.Property<int>("AtrakcjaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PrzewodnikId")
                        .HasColumnType("int");

                    b.HasKey("AtrakcjaId");

                    b.HasIndex("PrzewodnikId");

                    b.ToTable("Atrakcja");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Kraj", b =>
                {
                    b.Property<int>("KrajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazwaKraju")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("KrajId");

                    b.ToTable("Kraj");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Miasto", b =>
                {
                    b.Property<int>("MiastoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazwaMiasta")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("MiastoId");

                    b.ToTable("Miasto");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Platnosc", b =>
                {
                    b.Property<int>("PlatnoscId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Kwota")
                        .HasColumnType("float");

                    b.Property<double>("Rabat")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PlatnoscId");

                    b.ToTable("Platnosc");

                    b.HasData(
                        new
                        {
                            PlatnoscId = 1,
                            Kwota = 50.0,
                            Rabat = 0.0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("WycieczkiIO.Models.Przewodnik", b =>
                {
                    b.Property<int>("PrzewodnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrzewodnikId");

                    b.ToTable("Przewodnik");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Transport", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresKoniecId")
                        .HasColumnType("int");

                    b.Property<int>("AdresPoczatekId")
                        .HasColumnType("int");

                    b.Property<int>("RodzajTransportu")
                        .HasColumnType("int");

                    b.HasKey("TransportId");

                    b.HasIndex("AdresKoniecId");

                    b.HasIndex("AdresPoczatekId");

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Uczestnik", b =>
                {
                    b.Property<int>("UczestnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("WycieczkaId")
                        .HasColumnType("int");

                    b.Property<int>("WycieczkiId")
                        .HasColumnType("int");

                    b.HasKey("UczestnikId");

                    b.HasIndex("WycieczkaId");

                    b.ToTable("Uczestnik");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Wycieczka", b =>
                {
                    b.Property<int>("WycieczkaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataPlatnosci")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataRozpoczecia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataZakonczenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiejsceDocelowe")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("PlatnoscId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ZakwaterowanieId")
                        .HasColumnType("int");

                    b.HasKey("WycieczkaId");

                    b.HasIndex("PlatnoscId");

                    b.HasIndex("ZakwaterowanieId");

                    b.ToTable("Wycieczka");
                });

            modelBuilder.Entity("WycieczkiIO.Models.WycieczkaAtrakcja", b =>
                {
                    b.Property<int>("WycieczkaId")
                        .HasColumnType("int");

                    b.Property<int>("AtrakcjaId")
                        .HasColumnType("int");

                    b.HasKey("WycieczkaId", "AtrakcjaId");

                    b.HasIndex("AtrakcjaId");

                    b.ToTable("WycieczkaAtrakcja");
                });

            modelBuilder.Entity("WycieczkiIO.Models.WycieczkaTransport", b =>
                {
                    b.Property<int>("WycieczkaId")
                        .HasColumnType("int");

                    b.Property<int>("TransportId")
                        .HasColumnType("int");

                    b.HasKey("WycieczkaId", "TransportId");

                    b.HasIndex("TransportId");

                    b.ToTable("WycieczkaTransport");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Zakwaterowanie", b =>
                {
                    b.Property<int>("ZakwaterowanieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.HasKey("ZakwaterowanieId");

                    b.HasIndex("AdresId");

                    b.ToTable("Zakwaterowanie");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Adres", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Kraj", "Kraj")
                        .WithMany("Adresy")
                        .HasForeignKey("KrajId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WycieczkiIO.Models.Miasto", "Miasto")
                        .WithMany("Adresy")
                        .HasForeignKey("MiastoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kraj");

                    b.Navigation("Miasto");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Atrakcja", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Przewodnik", "Przewodnik")
                        .WithMany("Atrakcja")
                        .HasForeignKey("PrzewodnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Przewodnik");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Transport", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Adres", "AdresKoniec")
                        .WithMany()
                        .HasForeignKey("AdresKoniecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WycieczkiIO.Models.Adres", "AdresPoczatek")
                        .WithMany()
                        .HasForeignKey("AdresPoczatekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdresKoniec");

                    b.Navigation("AdresPoczatek");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Uczestnik", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Wycieczka", "Wycieczka")
                        .WithMany("Uczestnicy")
                        .HasForeignKey("WycieczkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wycieczka");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Wycieczka", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Platnosc", "Platnosc")
                        .WithMany()
                        .HasForeignKey("PlatnoscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WycieczkiIO.Models.Zakwaterowanie", "Zakwaterowanie")
                        .WithMany("Wycieczki")
                        .HasForeignKey("ZakwaterowanieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platnosc");

                    b.Navigation("Zakwaterowanie");
                });

            modelBuilder.Entity("WycieczkiIO.Models.WycieczkaAtrakcja", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Atrakcja", "Atrakcja")
                        .WithMany("WycieczkaAtrakcja")
                        .HasForeignKey("AtrakcjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WycieczkiIO.Models.Wycieczka", "Wycieczka")
                        .WithMany("WycieczkaAtrakcja")
                        .HasForeignKey("WycieczkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atrakcja");

                    b.Navigation("Wycieczka");
                });

            modelBuilder.Entity("WycieczkiIO.Models.WycieczkaTransport", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Transport", "Transport")
                        .WithMany("WycieczkaTransport")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WycieczkiIO.Models.Wycieczka", "Wycieczka")
                        .WithMany("WycieczkaTransport")
                        .HasForeignKey("WycieczkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");

                    b.Navigation("Wycieczka");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Zakwaterowanie", b =>
                {
                    b.HasOne("WycieczkiIO.Models.Adres", "Adres")
                        .WithMany()
                        .HasForeignKey("AdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adres");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Atrakcja", b =>
                {
                    b.Navigation("WycieczkaAtrakcja");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Kraj", b =>
                {
                    b.Navigation("Adresy");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Miasto", b =>
                {
                    b.Navigation("Adresy");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Przewodnik", b =>
                {
                    b.Navigation("Atrakcja");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Transport", b =>
                {
                    b.Navigation("WycieczkaTransport");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Wycieczka", b =>
                {
                    b.Navigation("Uczestnicy");

                    b.Navigation("WycieczkaAtrakcja");

                    b.Navigation("WycieczkaTransport");
                });

            modelBuilder.Entity("WycieczkiIO.Models.Zakwaterowanie", b =>
                {
                    b.Navigation("Wycieczki");
                });
#pragma warning restore 612, 618
        }
    }
}
